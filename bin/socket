/**
 * Module dependencies.
 */

var app = require('../index');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port;
port = normalizePort(process.env.PORT || '5005');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app, function(req,res){
  console.log('Socket IO server has been started');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log ('Running on ' + bind);
}

// upgrade http server to socket.io server
const io = require('socket.io').listen(server);

// Socket setting
io.sockets.on('connection', function(socket) {
  socket.emit('toclient', {
    msg:'Welcome !'
  });

  socket.on('fromclient', function(data) {
    socket.broadcast.emit('toclient', data); // 자신을 제외하고 다른 클라이언트에게 보냄.
    socket.emit('toclient', data); // 해당 클라이언트에게만 보냄.
    // io.sockets 전체소켓
    // socket 연결된 소켓
    // 귓속말 io.sockets(socket_id).emit('toclient', function(data) {});
    console.log('Message from client :' + data.msg);
  })
});
